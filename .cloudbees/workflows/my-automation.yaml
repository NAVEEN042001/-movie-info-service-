apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My automation

on:
  push:
    branches:
      - main

jobs:
  Checkout:
    steps:
      - name: checkout
        uses: cloudbees-io/checkout@v1

  Build:
    needs: Checkout
    steps:
      - uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace

      - name: checkout
        uses: cloudbees-io/checkout@v1

      - name: Build 
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn clean install 
  StaticAnalysis:
    needs:
      - Build
    steps:
      - name: List directory contents after Build
        uses: docker://alpine:latest
        run: |
          echo "Current directory: $(pwd)"
          ls -lR /cloudbees/workspace
      - name: SonarQube analysis
        uses: docker://sonarsource/sonar-scanner-cli:latest
        run: |
          sonar-scanner \
            -Dsonar.projectKey=movie-info \
            -Dsonar.sources=/cloudbees/workspace \
            -Dsonar.java.binaries=/cloudbees/workspace/target/classes \
            -Dsonar.host.url=https://sonarqube.cb-demos.io \
            -Dsonar.login=20e414018be1508e8a472229e7ec07da1a13cfa1    
  DeployApplicationAWS:
    needs: [StaticAnalysis]
    steps:
      - name: Configure AWS credentials
        if: secrets.AWS_ACCESS_KEY_ID && secrets.AWS_SECRET_ACCESS_KEY && secrets.AWS_SESSION_TOKEN
        uses: cloudbees-io/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Remove existing key pair if exists
        uses: docker://amazon/aws-cli:latest
        run: |
          if aws ec2 describe-key-pairs --key-name "naveencatlog" --region us-east-1; then
            aws ec2 delete-key-pair --key-name "naveencatlog" --region us-east-1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Create and use EC2 key pair
        uses: docker://amazon/aws-cli:latest
        run: |
          aws ec2 create-key-pair --key-name naveencatlog --region us-east-1 --query 'KeyMaterial' --output text > naveencatlog.pem
          chmod 400 naveencatlog.pem
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-04a81a99f5ec58529 --instance-type t2.micro --key-name "naveencatlog" --region us-east-1 --query 'Instances[0].InstanceId' --output text)
          echo $INSTANCE_ID > instance_id.txt
          ls
          cat instance_id.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Wait for EC2 instance to be running
        uses: docker://amazon/aws-cli:latest
        run: |
          INSTANCE_ID=$(cat instance_id.txt)
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
          echo $PUBLIC_DNS:9090 > public_dns.txt
          cat public_dns.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Add delay to ensure instance is ready
        uses: docker://alpine:latest
        run: |
          echo "Waiting for 60 seconds to ensure the instance is ready..."
          sleep 60
